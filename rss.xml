<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>nsrl&#39;s blog</title>
    <link>http://nsrl.github.io</link>
    <pubDate>21 Sep 14 21:31 CST</pubDate>
    <item>
      <title>goodday</title>
      <link>http://nsrl.github.io/default/goodday/</link>
      <pubDate>2014-09-21 12:00:00 +0800</pubDate>
      <description></description>
    </item>
    <item>
      <title>go-windows-goexif</title>
      <link>http://nsrl.github.io/Go/go-windows-goexif/</link>
      <pubDate>2014-09-21 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;纯go版:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get github.com/rwcarlsen/goexif/exif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;cgo版:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# 1. 下载libexif源码,获取头文件&#xA;# 2. 下载exif.dll, 记得下载cygwin下的版本, 直接google得到的版本不靠谱,版本太老&#xA;go get github.com/gosexy/exif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>Python-urllib</title>
      <link>http://nsrl.github.io/python/Python-urllib/</link>
      <pubDate>2014-09-21 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;urllib模块提供的上层接口，使我们可以像读取本地文件一样读取www和ftp上的数据。每当使用这个模块的时候，老是会想起公司产品的客户端，同事用C++下载Web上的图片，那种“痛苦”的表情。我以前翻译过libcurl教程，这是在C/C++环境下比较方便实用的网络操作库，相比起 libcurl，Python的urllib模块的使用门槛则低多了。可能有些人又会用效率来批评Python，其实在操作网络，或者在集群交互的时候， 语言的执行效率绝不是瓶颈。这种情况下，一个比较好的方法是，将python嵌入到C/C++中，让Python来完成一些不是核心的逻辑处理。又扯远了，废话少说，开始urllib之旅吧~~ （前几天我用这个模块写了个蜘蛛，感兴趣的同学可以在以前的博客中找到代码）&#xA;先看一个例子，这个例子把Google首页的html抓取下来并显示在控制台上：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# 别惊讶，整个程序确实只用了两行代码  &#xA;import urllib  &#xA;print urllib.urlopen(&#39;http://www.baidu.com&#39;).read() &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# 别惊讶，整个程序确实只用了两行代码&#xA;import urllib&#xA;print urllib.urlopen(&#39;http://www.baidu.com&#39;).read()&#xA;#urllib.urlopen(url[, data[, proxies]]) :&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;创建一个表示远程url的类文件对象，然后像本地文件一样操作这个类文件对象来获取远程数据。参数url表示远程数据的路径，一般是网址；参数data表示以post方式提交到url的数据(玩过web的人应该知道提交数据的两种方式：post与get。如果你不清楚，也不必太在意，一般情况下很少用到这个参数)；参数proxies用于设置代理（这里不详细讲怎么使用代理，感兴趣的看客可以去翻阅Python手册urllib模块）。urlopen返回 一个类文件对象，他提供了如下方法：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;*     read() , readline() , readlines() , fileno() , close() ：这些方法的使用方式与文件对象完全一样;&#xA;*     info()：返回一个httplib.HTTPMessage 对象，表示远程服务器返回的头信息；&#xA;*     getcode()：返回Http状态码。如果是http请求，200表示请求成功完成;404表示网址未找到；&#xA;*     geturl()：返回请求的url；&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;下面来扩充一下上面的例子，看官可以运行一下这个例子，加深对urllib的印象：&#xA;    import urllib&#xA;    baidu = urllib.urlopen(&amp;lsquo;http://www.baidu.com&amp;rsquo;)&lt;br /&gt;&#xA;    print &amp;lsquo;http header:\n&amp;rsquo;, baidu.info()&lt;br /&gt;&#xA;    print &amp;lsquo;http status:&amp;lsquo;, baidu.getcode()&lt;br /&gt;&#xA;    print &amp;lsquo;url:&amp;lsquo;, baidu.geturl()&lt;br /&gt;&#xA;    for line in baidu: # 就像在操作本地文件&lt;br /&gt;&#xA;        print line,&lt;br /&gt;&#xA;    baidu.close()&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;urllib.urlretrieve(url[, filename[, reporthook[, data]]])：&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;urlretrieve&lt;/code&gt;方法直接将远程数据下载到本地。参数filename指定了保存到本地的路径（如果未指定该参数，urllib会生成一个临时文件来保存数据）；参数reporthook是一个回调函数，当连接上服务器、以及相应的数据块传输完毕的时候会触发该回调。我们可以利用这个回调函 数来显示当前的下载进度，下面的例子会展示。参数data指post到服务器的数据。该方法返回一个包含两个元素的元组(filename, headers)，filename表示保存到本地的路径，header表示服务器的响应头。下面通过例子来演示一下这个方法的使用，这个例子将新浪首页的html抓取到本地，保存在D:\sina.html文件中，同时显示下载的进度。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def cbk(a, b, c):  &#xA;    &#39;&#39;&#39;&#39;&#39;回调函数 &#xA;    @a: 已经下载的数据块 &#xA;    @b: 数据块的大小 &#xA;    @c: 远程文件的大小 &#xA;    &#39;&#39;&#39;  &#xA;    per = 100.0 * a * b / c  &#xA;    if per &amp;gt; 100:  &#xA;        per = 100  &#xA;   print &#39;%.2f%%&#39; % per  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   url = &#39;http://www.sina.com.cn&#39;  &#xA;   local = &#39;d:\\sina.html&#39;  &#xA;   urllib.urlretrieve(url, local, cbk)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;上面介绍的两个方法是urllib中最常用的方法，这些方法在获取远程数据的时候，内部会使用URLopener或者 FancyURLOpener类。作为urllib的使用者，我们很少会用到这两个类，这里我不想多讲。如果对urllib的实现感兴趣， 或者希望urllib支持更多的协议，可以研究这两个类。在Python手册中，urllib的作者还列出了这个模块的缺陷和不足，感兴趣的同学可以打开 Python手册了解一下。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;urllib&lt;/code&gt;中还提供了一些辅助方法，用于对url进行编码、解码。url中是不能出现一些特殊的符号的，有些符号有特殊的用途。我们知道以get方式提交数据的时候，会在url中添加key=value这样的字符串，所以在value中是不允许有&amp;rsquo;=&amp;lsquo;，因此要对其进行编码；与此同时服务器接收到这些参数的时候，要进行解码，还原成原始的数据。这个时候，这些辅助方法会很有用：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;* urllib.quote(string[, safe])：对字符串进行编码。参数safe指定了不需要编码的字符;&#xA;* urllib.unquote(string) ：对字符串进行解码；&#xA;* urllib.quote_plus(string [ , safe ] ) ：与urllib.quote类似，但这个方法用&#39;+&#39;来替换&#39; &#39;，而quote用&#39;%20&#39;来代替&#39; &#39;&#xA;* urllib.unquote_plus(string ) ：对字符串进行解码；&#xA;* urllib.urlencode(query[, doseq])：将dict或者包含两个元素的元组列表转换成url参数。例如 字典{&#39;name&#39;: &#39;dark-bull&#39;, &#39;age&#39;: 200}将被转换为&amp;quot;name=dark-bull&amp;amp;age=200&amp;quot;&#xA;* urllib.pathname2url(path)：将本地路径转换成url路径；&#xA;* urllib.url2pathname(path)：将url路径转换成本地路径；&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;用一个例子来体验一下这些方法吧~~：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data = &#39;name = ~a+3&#39;     &#xA;data1 = urllib.quote(data)  &#xA;print data1 # result: name%20%3D%20%7Ea%2B3  &#xA;print urllib.unquote(data1) # result: name = ~a+3  &#xA;&#xA;data2 = urllib.quote_plus(data)  &#xA;print data2 # result: name+%3D+%7Ea%2B3  &#xA;print urllib.unquote_plus(data2)    # result: name = ~a+3   &#xA;&#xA;data3 = urllib.urlencode({ &#39;name&#39;: &#39;dark-bull&#39;, &#39;age&#39;: 200 })  &#xA;print data3 # result: age=200&amp;amp;name=dark-bull  &#xA;data4 = urllib.pathname2url(r&#39;d:\a\b\c\23.php&#39;)  &#xA;print data4 # result: ///D|/a/b/c/23.php  &#xA;print urllib.url2pathname(data4)    # result: D:\a\b\c\23.php  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>你的第一篇博客</title>
      <link>http://nsrl.github.io/2013/new-born.html</link>
      <pubDate>2013-02-08 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任意删掉,修改这个文件&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;&#xA;&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;&#xA;&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;&#xA;&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor post 文章标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile #编译&#xA;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;申请github帐户&lt;/li&gt;&#xA;&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;&#xA;&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;&#xA;&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git&#xA;git add -A&#xA;git commit -m &amp;quot;...&amp;quot;&#xA;git pull&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;祝你使用愉快&lt;/h1&gt;&#xA;</description>
    </item>
  </channel>
</rss>